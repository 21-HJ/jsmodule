% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/forestglm.R
\name{forestglmServer}
\alias{forestglmServer}
\title{forestglmServer:shiny module server for forestglm}
\usage{
forestglmServer(
  id,
  data,
  data_label,
  family,
  data_varStruct = NULL,
  nfactor.limit = 10,
  design.survey = NULL
)
}
\arguments{
\item{id}{id}

\item{data}{Reactive data}

\item{data_label}{Reactive data label}

\item{family}{family, "gaussian" or "binomial"}

\item{data_varStruct}{Reactive List of variable structure, Default: NULL}

\item{nfactor.limit}{nlevels limit in factor variable, Default: 10}

\item{design.survey}{reactive survey data. default: NULL}
}
\value{
Shiny module server for forestglm
}
\description{
Shiny module server for forestglm
}
\details{
Shiny module server for forestglm
}
\examples{
\dontrun{
if(interactive()){
library(survival);library(jstable);library(data.table);library(dplyr);library(shiny);library(DT)

lung \%>\%
  mutate(
    status = factor(as.integer(status == 1)),
    sex = factor(sex),
    kk = factor(as.integer(pat.karno >= 70)),
    kk1 = factor(as.integer(pat.karno >= 60))
  ) -> lung

ui <- fluidPage(
  sidebarLayout(
    sidebarPanel(
      forestglmUI('Forest')
    ),
    mainPanel(
      DTOutput('tablesub')
    )
  )
)

out<-lung

server <- function(input, output, session) {
  data<-reactive(out)
  label<-reactive(mk.lev(out))
  outtable<-forestglmServer('Forest',data=data,data_label=label,family='gaussian')
  output$tablesub<-renderDT({
    outtable()
  })
}

shinyApp(ui, server)

 }
}
}
\seealso{
\code{\link[data.table]{setDT}}
 \code{\link[survey]{surveysummary}}, \code{\link[survey]{svytable}}
 \code{\link[forestploter]{forest_theme}}, \code{\link[forestploter]{forest}}
 \code{\link[rvg]{dml}}
 \code{\link[officer]{read_pptx}}, \code{\link[officer]{add_slide}}, \code{\link[officer]{ph_with}}, \code{\link[officer]{ph_location}}
}
